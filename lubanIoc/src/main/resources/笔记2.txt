第一次 执行InstantiationAwareBeanPostProcessor 的postProcessBeforeInstantiation{

cityService  -------------------BeanPostProcessor---------------postProcessAfterInitialization(aop){

	}
}
	在bean没有开始实例化之前执行
第二次determineConstructorsFromBeanPostProcessors---SmartInstantiationAwareBeanPostProcessor--determineCandidateConstructors
	推断构造方法
第三次applyMergedBeanDefinitionPostProcessors---MergedBeanDefinitionPostProcessor---postProcessMergedBeanDefinition
	缓存注解信息

第四次addSingletonFactory ---SmartInstantiationAwareBeanPostProcessor---getEarlyBeanReference
	得到一个体现暴露的对象----对象不是bean（在spring容器当中，并且由sping自己产生的）
第五次populateBean-----InstantiationAwareBeanPostProcessor--postProcessAfterInstantiation
	判断你的bean需不需要完成属性填充


第六次populateBean-------- InstantiationAwareBeanPostProcessor---postProcessPropertyValues
	属性填充---自动注入

第七次----BeanPostProcessor----postProcessBeforeInitialization

第八次		postProcessAfterInitialization   初始化过程，当bean已经new出来，并且已经完成了属性填充（自动装配）之后执行的


第九次-----------destory
